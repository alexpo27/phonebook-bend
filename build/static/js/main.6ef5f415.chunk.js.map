{"version":3,"sources":["Persons.js","PersonForm.js","Filter.js","services/PersonsServices.js","SuccessMessage.js","ErrorMessage.js","App.js","serviceWorker.js","index.js"],"names":["Persons","getList","PersonForm","addDetails","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","value","onChange","type","Filter","filter","handleFilterChange","baseUrl","axios","get","then","response","data","newObject","post","id","delete","updatedObj","put","SuccessMessage","message","className","ErrorMessage","App","useState","persons","setPersons","setNewName","setNewNumber","setFilter","errorMessage","setErrorMessage","successMessage","setSuccessMessage","useEffect","personsService","allPersons","names","map","person","name","deleteEntry","entry","window","confirm","setTimeout","catch","error","console","log","detailsToShow","includes","event","target","preventDefault","newObj","number","toString","_id","editedPerson","concat","returnedPerson","key","onClick","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6ef5f415.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Persons = ({ getList }) => {\r\n    return (\r\n      <div>\r\n        {getList()}\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Persons","import React from 'react'\r\n\r\nconst PersonForm = ({ addDetails, newName, handleNameChange, newNumber, handleNumberChange }) => {\r\n    return (\r\n      <div>\r\n        <form onSubmit={addDetails}>\r\n          <div>\r\n            name: <input value={newName} onChange={handleNameChange} />\r\n          </div>\r\n          <div>\r\n            number: <input value={newNumber} onChange={handleNumberChange} />\r\n          </div>\r\n          <div>\r\n            <button type=\"submit\">add</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Filter = ({ filter, handleFilterChange }) => {\r\n    return (\r\n      <div>\r\n        <div>filter with</div><input value={filter} onChange={handleFilterChange} />\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default Filter","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\n// retrieves and returns all data from server \r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n// posts newObject(param) to the server\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n// removes object with 'id'(param) from the server\r\nconst remove = id => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request\r\n}\r\n\r\n// replaces the object with 'id'(param)\r\n// with the `replaceObject'(param)\r\n// TODO: fix this part. put request not working, error 404\r\nconst updateNumber = (id, updatedObj) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, updatedObj)\r\n    return request.then(response => response.data)\r\n}\r\n \r\nexport default { getAll, create, remove, updateNumber }","import React from 'react'\r\n\r\nconst SuccessMessage = ({ message }) => {\r\n    if(message === '') {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"success\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default SuccessMessage","import React from 'react'\r\n\r\nconst ErrorMessage = ({ message }) => {\r\n    if(message === '') {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default ErrorMessage","import React, { useState, useEffect } from 'react'\r\nimport Persons from './Persons'\r\nimport PersonForm from './PersonForm'\r\nimport Filter from './Filter'\r\nimport personsService from './services/PersonsServices'\r\nimport SuccessMessage from './SuccessMessage'\r\nimport ErrorMessage from './ErrorMessage'\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons] = useState([]) \r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ filter, setFilter ] = useState('')\r\n  const [ errorMessage, setErrorMessage ] = useState('')\r\n  const [ successMessage, setSuccessMessage ] = useState('')\r\n\r\n\r\n  // calls getAll method once on render\r\n  useEffect(() => {\r\n    personsService\r\n        .getAll()\r\n        .then(allPersons => {\r\n          setPersons(allPersons)\r\n        })\r\n  }, [])\r\n\r\n  // extracts objects' names for rendering \r\n  let names = persons.map(person => person.name)\r\n\r\n  // dinamically creates each list element containig persons' details\r\n  const getList = () => {\r\n    return detailsToShow.map(person => <p key={person.id}>{person.name} {person.number} <button onClick={() => deleteEntry(person)}>Delete</button></p>)\r\n  }\r\n\r\n  // changes specific states when values are changed inside input fields\r\n  const handleNameChange = (event) => setNewName(event.target.value)\r\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\r\n  const handleFilterChange = (event) => setFilter(event.target.value)\r\n  \r\n\r\n  // input: event(submit) prevented with preventDefault\r\n  // creates new object containing the submited name and number\r\n  const addDetails = (event) => {\r\n    event.preventDefault()\r\n    const newObj = {\r\n      name: newName,\r\n      number: newNumber.toString()\r\n    }\r\n    // if name already exists asks user for confirmation\r\n    // and calls updateNumber[from personsService] method to change user's number\r\n    if(names.includes(newName)) {\r\n      if(window.confirm(`${newName} is already added to the phonebook, replace the old number with a new one?`)) {\r\n        const _id = persons.filter(person => person.name === newName)[0].id\r\n        personsService\r\n            .updateNumber(_id, newObj)\r\n            .then(editedPerson => {\r\n              setPersons(persons.filter(person => person.id !== editedPerson.id).concat(editedPerson))\r\n              setSuccessMessage(`Phone number for ${editedPerson.name} has been updated!`)\r\n              setTimeout(() => {\r\n                setSuccessMessage('')\r\n              },5000)\r\n            })\r\n            .catch(error => {\r\n              setErrorMessage(error.message)\r\n              setTimeout(() => {\r\n                setErrorMessage('')\r\n              },5000)\r\n            })\r\n      }\r\n    // if not, calls create method[from personsService] and updates the state\r\n    } else {\r\n      personsService\r\n          .create(newObj)\r\n          .then(returnedPerson => {\r\n            setPersons(persons.concat(returnedPerson))\r\n            setSuccessMessage(`Added ${returnedPerson.name}`)\r\n            setTimeout(() => {\r\n              setSuccessMessage('')\r\n            },5000)\r\n          })\r\n          .catch(error => {\r\n            setErrorMessage(error.response.data.error)\r\n            setTimeout(() => {\r\n              setErrorMessage('')\r\n            },5000)\r\n          })\r\n    }\r\n    setNewName('')\r\n    setNewNumber('')\r\n  }\r\n\r\n\r\n  // input: entry - an object representing one of the persons in the list\r\n  // removes the entry after user confirmation\r\n  // by calling the remove method from personsService\r\n  // and resets the state to the remaining persons\r\n  const deleteEntry = (entry) => {\r\n    if(window.confirm(`Delete ${entry.name}?`)) {\r\n      personsService\r\n      .remove(entry.id)\r\n      .then(response => {\r\n        setPersons(persons.filter(person => person.id !== entry.id))\r\n        setSuccessMessage(`Removed ${entry.name}`)\r\n        setTimeout(() => {\r\n          setSuccessMessage('')\r\n        },5000)\r\n      })\r\n      .catch(error => {\r\n        console.log(error)\r\n        setErrorMessage(`Information of ${entry.name} has already been removed from server.`)\r\n        setTimeout(() => {\r\n          setErrorMessage('')\r\n        },5000)\r\n      })\r\n    }\r\n  }\r\n\r\n// sets detailsToShow to whole persons array if filter is empty\r\n// or to objects that have names coresponding to the filter\r\n  const detailsToShow = filter === '' \r\n      ? persons\r\n      : persons.filter(person => person.name.includes(filter))\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <SuccessMessage message={successMessage} />\r\n      <ErrorMessage message={errorMessage} />\r\n      <Filter filter={filter} handleFilterChange={handleFilterChange} />\r\n      \r\n      <h2>add new person</h2>\r\n      <PersonForm addDetails={addDetails} newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumberChange={handleNumberChange} />\r\n\r\n      <h2>Numbers</h2>\r\n      <Persons getList={getList} />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}