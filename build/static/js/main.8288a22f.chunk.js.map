{"version":3,"sources":["Persons.js","PersonForm.js","Filter.js","services/PersonsServices.js","SuccessMessage.js","ErrorMessage.js","App.js","serviceWorker.js","index.js"],"names":["Persons","getList","PersonForm","addDetails","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","value","onChange","type","Filter","filter","handleFilterChange","baseUrl","axios","get","then","response","data","newObject","post","id","delete","replaceObject","put","SuccessMessage","message","className","ErrorMessage","App","useState","persons","setPersons","setNewName","setNewNumber","setFilter","errorMessage","setErrorMessage","successMessage","setSuccessMessage","useEffect","personsService","allPersons","names","map","person","name","deleteEntry","entry","window","confirm","setTimeout","catch","error","console","log","detailsToShow","includes","event","target","preventDefault","newObj","number","toString","_id","editedPerson","concat","returnedPerson","key","onClick","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8288a22f.chunk.js","sourcesContent":["import React from 'react'\n\nconst Persons = ({ getList }) => {\n    return (\n      <div>\n        {getList()}\n      </div>\n    )\n  }\n\nexport default Persons","import React from 'react'\n\nconst PersonForm = ({ addDetails, newName, handleNameChange, newNumber, handleNumberChange }) => {\n    return (\n      <div>\n        <form onSubmit={addDetails}>\n          <div>\n            name: <input value={newName} onChange={handleNameChange} />\n          </div>\n          <div>\n            number: <input value={newNumber} onChange={handleNumberChange} />\n          </div>\n          <div>\n            <button type=\"submit\">add</button>\n          </div>\n        </form>\n      </div>\n    )\n  }\n\nexport default PersonForm","import React from 'react'\n\nconst Filter = ({ filter, handleFilterChange }) => {\n    return (\n      <div>\n        <div>filter with</div><input value={filter} onChange={handleFilterChange} />\n      </div>\n    )\n  }\n\nexport default Filter","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\n// retrieves and returns all data from server \nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\n// posts newObject(param) to the server\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\n// removes object with 'id'(param) from the server\nconst remove = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request\n}\n\n// replaces the object with 'id'(param)\n// with the `replaceObject'(param)\nconst updateNumber = (id, replaceObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, replaceObject)\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, remove, updateNumber }","import React from 'react'\n\nconst SuccessMessage = ({ message }) => {\n    if(message === '') {\n        return null\n    }\n\n    return (\n        <div className=\"success\">\n            {message}\n        </div>\n    )\n}\n\n\nexport default SuccessMessage","import React from 'react'\n\nconst ErrorMessage = ({ message }) => {\n    if(message === '') {\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\n\nexport default ErrorMessage","import React, { useState, useEffect } from 'react'\nimport Persons from './Persons'\nimport PersonForm from './PersonForm'\nimport Filter from './Filter'\nimport personsService from './services/PersonsServices'\nimport SuccessMessage from './SuccessMessage'\nimport ErrorMessage from './ErrorMessage'\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ filter, setFilter ] = useState('')\n  const [ errorMessage, setErrorMessage ] = useState('')\n  const [ successMessage, setSuccessMessage ] = useState('')\n\n\n  // calls getAll method once on render\n  useEffect(() => {\n    personsService\n        .getAll()\n        .then(allPersons => {\n          setPersons(allPersons)\n        })\n  }, [])\n\n  // extracts objects' names for rendering \n  let names = persons.map(person => person.name)\n\n  // dinamically creates each list element containig persons' details\n  const getList = () => {\n    return detailsToShow.map(person => <p key={person.name}>{person.name} {person.number} <button onClick={() => deleteEntry(person)}>Delete</button></p>)\n  }\n\n  // changes specific states when values are changed inside input fields\n  const handleNameChange = (event) => setNewName(event.target.value)\n  const handleNumberChange = (event) => setNewNumber(event.target.value)\n  const handleFilterChange = (event) => setFilter(event.target.value)\n  \n\n  // input: event(submit) prevented with preventDefault\n  // creates new object containing the submited name and number\n  const addDetails = (event) => {\n    event.preventDefault()\n    const newObj = {\n      name: newName,\n      number: newNumber.toString()\n    }\n    // if name already exists asks user for confirmation\n    // and calls updateNumber[from personsService] method to change user's number\n    if(names.includes(newName)) {\n      if(window.confirm(`${newName} is already added to the phonebook, replace the old number with a new one?`)) {\n        const _id = persons.filter(person => person.name === newName)[0].id\n        personsService\n            .updateNumber(_id, newObj)\n            .then(editedPerson => {\n              setPersons(persons.filter(person => person.id !== editedPerson.id).concat(editedPerson))\n              setSuccessMessage(`Phone number for ${editedPerson.name} has been updated!`)\n              setTimeout(() => {\n                setSuccessMessage('')\n              },5000)\n            })\n            .catch(error => {\n              console.log(error)\n              setErrorMessage(`Operation failed, check the console to see a complete log of the error.`)\n              setTimeout(() => {\n                setErrorMessage('')\n              },5000)\n            })\n      }\n    // if not, calls create method[from personsService] and updates the state\n    } else {\n      personsService\n          .create(newObj)\n          .then(returnedPerson => {\n            setPersons(persons.concat(returnedPerson))\n            setSuccessMessage(`Added ${returnedPerson.name}`)\n            setTimeout(() => {\n              setSuccessMessage('')\n            },5000)\n          })\n          .catch(error => {\n            console.log(error)\n            setErrorMessage(`Operation failed, check the console to see a complete log of the error.`)\n            setTimeout(() => {\n              setErrorMessage('')\n            },5000)\n          })\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n\n  // input: entry - an object representing one of the persons in the list\n  // removes the entry after user confirmation\n  // by calling the remove method from personsService\n  // and resets the state to the remaining persons\n  const deleteEntry = (entry) => {\n    if(window.confirm(`Delete ${entry.name}?`)) {\n      personsService\n      .remove(entry.id)\n      .then(response => {\n        setPersons(persons.filter(person => person.id !== entry.id))\n        setSuccessMessage(`Removed ${entry.name}`)\n        setTimeout(() => {\n          setSuccessMessage('')\n        },5000)\n      })\n      .catch(error => {\n        console.log(error)\n        setErrorMessage(`Information of ${entry.name} has already been removed from server.`)\n        setTimeout(() => {\n          setErrorMessage('')\n        },5000)\n      })\n    }\n  }\n\n// sets detailsToShow to whole persons array if filter is empty\n// or to objects that have names coresponding to the filter\n  const detailsToShow = filter === '' \n      ? persons\n      : persons.filter(person => person.name.includes(filter))\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <SuccessMessage message={successMessage} />\n      <ErrorMessage message={errorMessage} />\n      <Filter filter={filter} handleFilterChange={handleFilterChange} />\n      \n      <h2>add new person</h2>\n      <PersonForm addDetails={addDetails} newName={newName} handleNameChange={handleNameChange} newNumber={newNumber} handleNumberChange={handleNumberChange} />\n\n      <h2>Numbers</h2>\n      <Persons getList={getList} />\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}